% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/phishin_get_date.R, R/phishin_get_eras.R,
%   R/phishin_get_shows.R, R/phishin_get_songs.R, R/phishin_get_tags.R,
%   R/phishin_get_tours.R, R/phishin_get_tracks.R, R/phishin_get_venues.R,
%   R/phishin_get_years.R, R/phishin_random_show.R
\name{pi_get_dates}
\alias{pi_get_dates}
\alias{pi_get_eras}
\alias{pi_get_shows}
\alias{pi_get_songs}
\alias{pi_get_tags}
\alias{pi_get_tours}
\alias{pi_get_tracks}
\alias{pi_get_venues}
\alias{pi_get_years}
\alias{pi_get_random_show}
\title{Query the Phish.in API}
\usage{
pi_get_dates(
  apikey = getOption("phishin_key"),
  date = NULL,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_eras(
  era = NULL,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_shows(
  apikey = getOption("phishin_key"),
  show = NULL,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1,
  sbd_only = FALSE,
  play_show = FALSE
)

pi_get_songs(song)

pi_get_tags(
  apikey = getOption("phishin_key"),
  tag = "all",
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_tours(
  apikey = getOption("phishin_key"),
  tour = NULL,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_tracks(song_name = "Possum", per_page = 100)

pi_get_venues(
  apikey = getOption("phishin_key"),
  venue = NULL,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_years(
  apikey = getOption("phishin_key"),
  year,
  sort_dir = "descending",
  sort_atr = "name",
  per_page = 20,
  page = 1
)

pi_get_random_show(apikey = getOption("phishin_key"), play_show = FALSE)
}
\arguments{
\item{date}{The date you wish to get show info for. Format either as \code{'MM-DD'}
or code{'month-DD'} (e.g. \code{'10-31'} or \code{'october-31'})}

\item{per_page}{The number of results per page. The API's default is 20, but
this can be set to larger or smaller numbers.}

\item{page}{The page of results to return. For some functions, this may be overridden as
there's only 1 page available.}

\item{era}{The era you wish to get years for}

\item{show}{Either an integer show ID (obtainable through \code{pi_get_tours},
\code{pi_get_songs}, etc) OR a specific date as a character string with
"YYYY-MM-DD" format.}

\item{sbd_only}{Logical indicating whether or not to only return information
for shows with soundboards (e.g. tag = \code{sbd}).}

\item{play_show}{logical indicating whether to navigate to the phish.in
url and start playing the show. Default is \code{FALSE}. Must supply a
\code{show} for this to be \code{TRUE}}

\item{song}{Either the name of a song or \code{"all"}. It appears that the
API does not support requests for more than one song at a time, so looping
over names is required. When \code{song = "all"}, a data frame of song names
and the number of times played is returned. When \code{song = "some song name"},
a data frame of dates played, show song positions, set positions, durations,
number of likes, and a list column of any tags associated with the perforamnce
is returned.}

\item{tag}{The integer ID, tag name, or slug entry for a tag. Defaults to \code{"all"},
returning a list of all tags w/ ID numbers, tag names, corresponding slugs,
descriptions, and a list of tracks that it's used for. The latter only applies
to specific tags, as the API doesn't return that information when \code{tag = "all"}}

\item{tour}{The tour you wish to get information for. Either \code{NULL} or the
name of a tour. It is usually best to get names for a specific tour from a call
using \code{NULL}, as they can be tricky to guess correctly sometimes.}

\item{venue}{The venue you wish to get information for. Either \code{NULL} or the
name of a venue.}

\item{year}{The desired year. use \code{year = 'all'} to get a show counts
for every year they toured. Enter a specific year to get a data frame with
dates, venue and location data, and complete setlists information for
each show in a year (set list data is the same format as \code{pi_get_song}).}
}
\description{
The \code{phish.in} API contains a vast amount of information.
The functions here are specific to each type of query that can be sent to the
API - all are prefixed with \code{pi_*}

The \code{phish.in} API contains a vast amount of information.
The functions here are specific to each type of query that can be sent to the
API - all are prefixed with \code{pi_*}
}
\details{
API keys can be obtained using the
\href{https://phish.in/contact-info}{contact form} on the API's
website. Once obtained, use it in the \code{apikey} argument to each
\code{pi_*} function. Alternatively, you can set a
\code{option(phishin_key = '<your-key'>)} in your .Rprofile.

Note that for all Phish.in API calls that include year information,
1983 - 1987 are lumped together as a single entity. Specific dates are still
available for shows and songs played in this time period.

API keys can be obtained using the
\href{https://phish.in/contact-info}{contact form} on the API's
website. Once obtained, use it in the \code{apikey} argument to each
\code{pi_*} function. Alternatively, you can set a
\code{option(phishin_key = '<your-key'>)} in your .Rprofile.

Note that for all Phish.in API calls that include year information,
1983 - 1987 are lumped together as a single entity. Specific dates are still
available for shows and songs played in this time period.
}
